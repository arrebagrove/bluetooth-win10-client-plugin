/******************************************************************************
The MIT License (MIT)

Copyright (c) 2016 Matchbox Mobile Limited <info@matchboxmobile.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*******************************************************************************/

// This file was generated by Bluetooth (R) Developer Studio on 2016.03.17 21:39
// with plugin Windows 10 UWP Client (version 1.0.0 released on 2016.03.16).
// Plugin developed by Matchbox Mobile Limited.

using System;
using System.Threading.Tasks;
using Windows.Devices.Bluetooth.GenericAttributeProfile;
using Windows.Storage.Streams;

namespace com.matchboxmobile.ble.wrappers
{
    /// <summary>
    /// Base class for all Value parsers. For any concrete implementation developer needs to implement
    /// two methods: ParseReadValue and ParseWriteValue. If given characteristic doesn't support read or write
    /// operation, the implementation could be in form:
    ///     throw new NotImplementedException();
    /// In most cases both TRead and TWrite types will be the same type.
    /// </summary>
    /// <typeparam name="TRead">type of the read results</typeparam>
    /// <typeparam name="TWrite">type of the object used for write operations</typeparam>
    public abstract class BleValueParser<TRead, TWrite>
    {
        private BleCharacteristic Characteristic { get; set; }
        
        /// <summary>
        /// Is given characteristic readable
        /// </summary>
        public bool IsReadable => Characteristic?.IsReadable ?? false;
        
        /// <summary>
        /// Is given characteristic writable
        /// </summary>
        public bool IsWritable => Characteristic?.IsWritable ?? false;
        
        /// <summary>
        /// Does connected characteristic support notification
        /// </summary>
        public bool SupportNotification => Characteristic?.SupportNotification ?? false;

        
        /// <summary>
        /// Abstract method for parsing value from raw IBuffer into output TRead type
        /// </summary>
        protected abstract TRead ParseReadValue(IBuffer raw);

        
        /// <summary>
        /// Abstract method to serialize intpu TWrite type into IBuffer ready to be set on
        /// connected characteristic
        /// </summary>
        protected abstract IBuffer ParseWriteValue(TWrite data);

        
        /// <summary>
        /// Custom event handler for notification/indication value changes
        /// </summary>
        public event EventHandler<ValueChangedEventArgs<TRead>> ValueChanged = null;

        
        /// <summary>
        /// Connects parser with particular characteristic. Characteristic can be controlled from that
        /// moment either directly or via this parser object.
        /// </summary>
        public void ConnectWithCharacteristic(BleCharacteristic characteristic)
        {
            Disconnect();
            if (characteristic == null)
                return;

            Characteristic = characteristic;
            Characteristic.ValueChanged -= CharacteristicOnValueChanged;
            Characteristic.ValueChanged += CharacteristicOnValueChanged;
        }

        private void CharacteristicOnValueChanged(object characteristic, ValueChangedEventArgs args)
        {
            ValueChanged?.Invoke((BleCharacteristic)characteristic,  new ValueChangedEventArgs<TRead>(ParseReadValue(args.Value)));
        }

        
        /// <summary>
        /// Disconnects parser from characteristic.
        /// </summary>
        public void Disconnect()
        {
            DisableNotifications();
            DisableIndications();
            if(Characteristic != null)
                Characteristic.ValueChanged -= CharacteristicOnValueChanged;
            Characteristic = null;
        }

        
        /// <summary>
        /// Run READ operation on connected characteristic.
        /// </summary>
        public async Task<TRead> Read()
        {
            if (Characteristic == null)
                return default(TRead);
            var val = await Characteristic.ReadAsync();
            return ParseReadValue(val.Value);
        }

        /// <summary>
        /// Run WRITE operation on connected characteristic.
        /// </summary>
        public async Task<GattCommunicationStatus> Write(TWrite data)
        {
            if (Characteristic == null)
                return GattCommunicationStatus.Unreachable;
            var output = ParseWriteValue(data);
            return await Characteristic?.WriteAsync(output);
        }

        /// <summary>
        /// Enables notifications on connected characteristic.
        /// </summary>
        public async Task<GattCommunicationStatus> EnableNotifications()
        {
            if (Characteristic == null)
                return GattCommunicationStatus.Unreachable;
            return await  Characteristic.EnableNotifications();
        }
        
        /// <summary>
        /// Disables notifications on connected characteristic.
        /// </summary>
        public async Task<GattCommunicationStatus> DisableNotifications()
        {
            if (Characteristic == null)
                return GattCommunicationStatus.Unreachable;
            return await Characteristic.DisableNotifications();
        }
        
        /// <summary>
        /// Enables inidcations on connected characteristic.
        /// </summary>
        public async Task<GattCommunicationStatus> EnableIndications()
        {
            if (Characteristic == null)
                return GattCommunicationStatus.Unreachable;
            return await Characteristic.EnableInidcations();
        }

        /// <summary>
        /// Disables inidcations on connected characteristic.
        /// </summary>
        public async Task<GattCommunicationStatus> DisableIndications()
        {
            if (Characteristic == null)
                return GattCommunicationStatus.Unreachable;
            return await Characteristic.DisableIndications();
        }

        /// <summary>
        /// Helper method to check if bitNumber bit is set on byte value
        /// </summary>
        protected bool IsBitSet(byte val, int bitNumber)
        {
            return (val & (1 << (8 - bitNumber))) != 0;
        }

        /// <summary>
        /// Helper method to check if bitNumber bit is set on ushort value
        /// </summary>
        protected bool IsBitSet(ushort val, int bitNumber)
        {
            return (val & (1 << (16 - bitNumber))) != 0;
        }

        /// <summary>
        /// Helper method to check if bitNumber bit is set on uint value
        /// </summary>
        protected bool IsBitSet(uint val, int bitNumber)
        {
            return (val & (1 << (32 - bitNumber))) != 0;
        }
    }

    /// <summary>
    /// Custom value changed event arg type, dedicated for particular
    /// value parser's TRead type
    /// </summary>
    public class ValueChangedEventArgs<TRead> : EventArgs
    {
        public TRead Value { get; set; }

        public ValueChangedEventArgs(TRead val)
        {
            Value = val;
        }
    }
}
