/******************************************************************************
The MIT License (MIT)

Copyright (c) 2016 Matchbox Mobile Limited <info@matchboxmobile.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*******************************************************************************/

// This file was generated by Bluetooth (R) Developer Studio on 2016.03.17 21:39
// with plugin Windows 10 UWP Client (version 1.0.0 released on 2016.03.16).
// Plugin developed by Matchbox Mobile Limited.

using System;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using System.Threading.Tasks;
using Windows.Devices.Bluetooth.GenericAttributeProfile;
using Windows.Storage.Streams;

namespace com.matchboxmobile.ble.wrappers
{
    public class StringParser : BleValueParser<String, String>
    {
        private static readonly StringParser GlobalInstanceUtf8 = new StringParser().SetStringFormat(GattPresentationFormatTypes.Utf8);
        private static readonly StringParser GlobalInstanceUtf16 = new StringParser().SetStringFormat(GattPresentationFormatTypes.Utf16);

        private byte StringFormat { get; set; } = GattPresentationFormatTypes.Utf8;

        protected override string ParseReadValue(IBuffer raw)
        {
            if (StringFormat == GattPresentationFormatTypes.Utf8)
            {
                return Encoding.UTF8.GetString(raw.ToArray());
            }
            else
            {
                return Encoding.Unicode.GetString(raw.ToArray());
            }
        }

        protected override IBuffer ParseWriteValue(string data)
        {
            if (StringFormat == GattPresentationFormatTypes.Utf8)
            {
                return Encoding.UTF8.GetBytes(data).AsBuffer();
            }
            else
            {
                return Encoding.Unicode.GetBytes(data).AsBuffer();
            }
        }

        public static string Convert(IBuffer input, byte format)
        {
            if (format == GattPresentationFormatTypes.Utf16)
            {
                return GlobalInstanceUtf16.ParseReadValue(input);
            }
            else
            {
                return GlobalInstanceUtf8.ParseReadValue(input);
            }
        }

        public static IBuffer Convert(string input, byte format)
        {
            if (format == GattPresentationFormatTypes.Utf16)
            {
                return GlobalInstanceUtf16.ParseWriteValue(input);
            }
            else
            {
                return GlobalInstanceUtf8.ParseWriteValue(input);
            }
        }

        public StringParser SetStringFormat(byte format)
        {
            if (format != GattPresentationFormatTypes.Utf8 && format != GattPresentationFormatTypes.Utf16)
                throw new ArgumentOutOfRangeException("format");

            StringFormat = format;

            return this;
        }
    }

    public static class BleCharacteristicString
    {
        public static async Task<string> ReadAsString(this BleCharacteristic me)
        {
            var readStatus = await me.ReadAsync();

            if (readStatus.Status == GattCommunicationStatus.Unreachable)
                return null;

            return StringParser.Convert(readStatus.Value, GattPresentationFormatTypes.Utf8);
        }

        public static async Task<string> ReadAsUnicodeString(this BleCharacteristic me)
        {
            var readStatus = await me.ReadAsync();

            if (readStatus.Status == GattCommunicationStatus.Unreachable)
                return null;

            return StringParser.Convert(readStatus.Value, GattPresentationFormatTypes.Utf16);
        }

        public static async Task<GattCommunicationStatus> WriteAsString(this BleCharacteristic me, string input)
        {
            var buffer = StringParser.Convert(input, GattPresentationFormatTypes.Utf8);
            return await me.WriteAsync(buffer);
        }

        public static async Task<GattCommunicationStatus> WriteAsUnicodeString(this BleCharacteristic me, string input)
        {
            var buffer = StringParser.Convert(input, GattPresentationFormatTypes.Utf16);
            return await me.WriteAsync(buffer);
        }
    }
}
